OBJS = ast.cmo parser.cmo scanner.cmo semantic.cmo compile.cmo seam.cmo 
TESTS = \
arith1 \
arith2 \
fib \
for1 \
func1 \
func2 \
func3 \
gcd \
gcd2 \
global1 \
hello \
if1 \
if2 \
if3 \
if4 \
ops1 \
var1 \
while1

# Choose one
YACC = ocamlyacc
# YACC = menhir --explain

TARFILES = Makefile testall.sh scanner.mll parser.mly \
	ast.ml semantic.ml seam.ml \
	$(TESTS:%=tests/test-%.mc) \
	$(TESTS:%=tests/test-%.out)

seamc : seam preprocessor
	echo "#!/bin/sh" > seamc
	echo './$(word 2,$^) < $$1 | ./$(word 1,$^)' >> seamc
	chmod +x seamc

seam : $(OBJS)
	ocamlc -o seam $(OBJS)

preprocessor : preprocessor.ml
	ocamlc -o preprocessor $<


.PHONY : test
test : seam testall.sh
	./testall.sh

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	$(YACC) parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

seam.tar.gz : $(TARFILES)
	cd .. && tar czf seam/seam.tar.gz $(TARFILES:%=seam/%)

.PHONY : clean
clean :
	rm -f seam parser.ml parser.mli scanner.ml testall.log \
	*.cmo *.cmi *.out *.diff preprocessor seamc

# Generated by ocamldep *.ml *.mli
ast.cmo :
ast.cmx :
parser.cmo : ast.cmo parser.cmi
parser.cmx : ast.cmx parser.cmi
preprocessor.cmo :
preprocessor.cmx :
scanner.cmo : parser.cmi
scanner.cmx : parser.cmx
seam.cmo : semantic.cmo scanner.cmo parser.cmi
seam.cmx : semantic.cmx scanner.cmx parser.cmx
semantic.cmo :
semantic.cmx :
parser.cmi : ast.cmo
